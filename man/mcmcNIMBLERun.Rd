% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mcmcInternals.R
\name{mcmcNIMBLERun}
\alias{mcmcNIMBLERun}
\title{Run NIMBLE using the specified arguments}
\usage{
mcmcNIMBLERun(..., mcCores = 1)
}
\arguments{
\item{...}{Named arguments to be passed to the constituent NIMBLE functions
\code{\link[nimble]{configureMCMC}}, \code{\link[nimble]{runMCMC}},
\code{\link[nimble]{nimbleModel}}, and \code{\link[nimble]{compileNimble}}. The
argument names will be matched to any relevant arguments in the constituent
functions. If you wish to specify that an argument is to passed to a specific
constitutent function then you can the name the argument with the form
\code{function.argument}, where 'function' is replaced with the name of the
relevant constituent function and 'argument' is replaced with the name of the
argument}

\item{mcCores}{An integer scalar giving the number of cores to distribute the
chains between. A value of \code{NA} sets the number of cores to be equal to
the number available on the system}
}
\value{
A list containing the following named elements:
\describe{
\item{\code{modelObject}}{An uncompiled model object as returned by the function
\code{\link[nimble]{nimbleModel}} using the parameters supplied}
\item{\code{mcmcObject}}{An uncompiled MCMC object as returned by the function
\code{\link[nimble]{buildMCMC}} using the parameters supplied}
\item{\code{...}}{The output of the completed MCMC as returned by the
function \code{\link[nimble]{runMCMC}} using the parameters supplied}
}
}
\description{
\code{mcmcNIMBLERun} provides a function to encapsulate an entire
run of NIMBLE (including compilation steps) using a set of user-specified
parameters
}
\examples{
\dontrun{
# Set some parameters for a linear regression
slopeParam <- 0.6
interceptParam <- 4.0
varParam <- 2.0
# A set of arguments to control the MCMC
thin <- 1
thin2 <- 2
niter <- 500
nburnin <- 100
nchains <- 2
# Initialise some fake data
xtest <- 1:100
ytest <- rnorm(length(xtest), interceptParam + slopeParam * xtest, sqrt(varParam))
# NIMBLE code to run the linear regression
testCode <- nimble::nimbleCode({
 slopeParam ~ dnorm(0.0, 0.001)
 interceptParam ~ dnorm(0.0, 0.001)
 varParam ~ dgamma(0.001, 0.001)
 precParam <- 1.0 / varParam
 for(iter in 1:length(xtest)) {
   meanVals[iter] <- interceptParam + slopeParam * xtest[iter]
   ytest[iter] ~ dnorm(meanVals[iter], precParam)
 }
})
# Run the model using the parameters, data, and code defined above
outputMCMC <- mcmcNIMBLERun(code = testCode, data = list(ytest = ytest),
  constants = list(xtest = xtest), WAIC = TRUE, summary = TRUE,
  inits = list(slopeParam = 0.0, interceptParam = 0.0, varParam = 10.0),
  monitors = c("slopeParam", "interceptParam"), monitors2 = "varParam",
  niter = niter, thin = thin, thin2 = thin2, nburnin = nburnin,
  nchains = nchains)$mcmcOutput
# Plot the results of the linear regression
plot(xtest, ytest)
abline(
  a = outputMCMC$summary$all.chains["interceptParam", "Mean"],
  b = outputMCMC$summary$all.chains["slopeParam", "Mean"]
)
} # TODO: Fix this example

}
\seealso{
\code{\link[nimble]{configureMCMC}}, \code{\link[nimble]{runMCMC}},
\code{\link[nimble]{nimbleModel}}, \code{\link[nimble]{compileNimble}},
\code{\link[nimble]{buildMCMC}},  \code{\link[nimble]{nimbleCode}}
}
\author{
Joseph D. Chipperfield, \email{joechip90@googlemail.com}
}
