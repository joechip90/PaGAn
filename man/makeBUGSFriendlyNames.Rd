% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mcmcInternals.R
\name{makeBUGSFriendlyNames}
\alias{makeBUGSFriendlyNames}
\title{Ensure That a Variable Name is BUGS-Compliant}
\usage{
makeBUGSFriendlyNames(inNames, warnType = NA, allowLeadingUnderscore = FALSE)
}
\arguments{
\item{inNames}{A character vector of variable names to ensure are
BUGS-compliant}

\item{warnType}{A character scalar denoting whether to produce feedback to
the user if the variable names provided in \code{inNames} are non-compliant.
\code{"message"}, \code{"warning"}, or \code{"error"} gives a message,
warning, or error respectively. All other values for \code{warnType} result
in no feedback being given to the user}

\item{allowLeadingUnderscore}{A logical scalar denoting whether leading
undercores are allowed in the name.  This is usually not acceptable naming
convention (hence the default to \code{FALSE}) but can be useful when
processing suffix names}
}
\value{
A character vector of BUGS-compliant variable names
}
\description{
R is quite permissive with variables names and not all variable
names allowed by R will result in functioning BUGS code. NIMBLE uses a
dialect of BUGS and so this function will automatically convert variables
names such that they can be interpreted correctly
}
\examples{
# A mixture of variable names
inputNames <- c(
  "aGoodVariableName1", "aGoodVariableName2", # Compliant names
  "1aBadVariableName", "aBadVariableName{2}"  # Non-compliant names
)
outputNames <- makeBUGSFriendlyNames(inputNames, "message")
# outputNames now contains compliant conversions of the non-compliant names

}
\seealso{
\code{\link[nimble]{nimbleCode}}
}
\author{
Joseph D. Chipperfield, \email{joechip90@googlemail.com}
}
